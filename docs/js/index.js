(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";

module.exports = {
  cc: function () {
    var url = './js/cc.json';
    var data = [];
    d3.json(url, function (error, res) {
      if (error) {
        console.log(error);
      } else {
        data = res.reduce(function (p, c) {
          p[c['alpha-3']] = c.name;
          return p;
        }, data);
      }
    });
    return {
      select: function select(cid) {
        return data[cid];
      }
    };
  }()
};

},{}],2:[function(require,module,exports){
"use strict";

module.exports = {
  disp: function (b) {
    return {
      show: function show(d) {
        b.html('<span style="font-size: 18px; font-weight: bold;">' + d.Name + ', ' + d.Nationality + '</span><br>' + '<br>' + d.Year + ': ' + 'Place ' + d.Place + ', ' + d3.timeFormat('%H:%M')(d.Time) + (d.Doping ? '<br><br>' + d.Doping : ''));
        b.attr('data-year', d.Year);
        b.attr('class', 'show');
      },
      hide: function hide() {
        b.html('');
        b.attr('class', 'hide');
      }
    };
  }(d3.select('#tooltip'))
};

},{}],3:[function(require,module,exports){
"use strict";

var _require = require('./cc.js'),
    cc = _require.cc;

var _require2 = require('./disp.js'),
    disp = _require2.disp;

var url = 'https://raw.githubusercontent.com/FreeCodeCamp/ProjectReferenceData/master/cyclist-data.json';
d3.json(url, function (error, res) {
  if (!error) {
    var height = 540;
    var width = 800;
    var field = d3.select('svg');
    var items;
    var horScale = d3.scaleLinear();
    var yearAxis = d3.axisBottom(horScale).tickFormat(d3.format(''));
    var vertScale = d3.scaleTime();
    var timeAxis = d3.axisLeft(vertScale).tickFormat(d3.timeFormat('%M:%S'));
    res.map(function (d) {
      d.Seconds *= 1000;
      d.Time = new Date(d.Seconds);
      d.Nationality = cc.select(d.Nationality);
    });
    vertScale.domain(d3.extent(res, function (d) {
      return new Date(d.Time);
    })).range([6, height - 6]).nice();
    horScale.domain(d3.extent(res, function (d) {
      return d.Year;
    })).range([6, width - 6]).nice();
    items = field.attr('height', height + 80).attr('width', width + 160).append('g').attr('id', 'CANVAS').attr('transform', 'translate(80, 0)').attr('height', height).attr('width', width).selectAll('g').data(res).enter();
    items.append('a').attr('href', function (d) {
      return d.URL ? d.URL : null;
    }).attr('target', '_blank').append('circle').on('mouseover', disp.show).on('mouseout', disp.hide).attr('class', 'dot').attr('stroke', 'black').attr('r', 6).attr('fill', function (d) {
      return d.Doping ? 'red' : 'green';
    }).attr('cx', function (d) {
      return horScale(d.Year);
    }).attr('cy', function (d) {
      return vertScale(d.Seconds);
    }).attr('data-yvalue', function (d) {
      return d.Time;
    }).attr('data-xvalue', function (d) {
      return d.Year;
    });
    field.append('text').text('Time up the Alpe d\'Huez').attr('transform', 'translate(40, 250) rotate(-90,0,13)');
    field.append('g').attr('id', 'y-axis').attr('transform', 'translate(70, 0)').call(timeAxis);
    field.append('g').attr('id', 'x-axis').attr('transform', "translate(80, ".concat(height + 20, ")")).call(yearAxis);
  }
});

},{"./cc.js":1,"./disp.js":2}]},{},[3])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
